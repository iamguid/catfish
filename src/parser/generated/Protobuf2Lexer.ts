// Generated from ./Protobuf2.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class Protobuf2Lexer extends Lexer {
	public static readonly SYNTAX = 1;
	public static readonly IMPORT = 2;
	public static readonly WEAK = 3;
	public static readonly PUBLIC = 4;
	public static readonly PACKAGE = 5;
	public static readonly OPTION = 6;
	public static readonly REPEATED = 7;
	public static readonly OPTIONAL = 8;
	public static readonly REQUIRED = 9;
	public static readonly GROUP = 10;
	public static readonly ONEOF = 11;
	public static readonly MAP = 12;
	public static readonly INT32 = 13;
	public static readonly INT64 = 14;
	public static readonly UINT32 = 15;
	public static readonly UINT64 = 16;
	public static readonly SINT32 = 17;
	public static readonly SINT64 = 18;
	public static readonly FIXED32 = 19;
	public static readonly FIXED64 = 20;
	public static readonly SFIXED32 = 21;
	public static readonly SFIXED64 = 22;
	public static readonly BOOL = 23;
	public static readonly STRING = 24;
	public static readonly DOUBLE = 25;
	public static readonly FLOAT = 26;
	public static readonly BYTES = 27;
	public static readonly RESERVED = 28;
	public static readonly EXTENSIONS = 29;
	public static readonly TO = 30;
	public static readonly MAX = 31;
	public static readonly ENUM = 32;
	public static readonly EXTEND = 33;
	public static readonly MESSAGE = 34;
	public static readonly SERVICE = 35;
	public static readonly RPC = 36;
	public static readonly STREAM = 37;
	public static readonly RETURNS = 38;
	public static readonly PROTO2_LIT_SINGLE = 39;
	public static readonly PROTO2_LIT_DOBULE = 40;
	public static readonly SEMI = 41;
	public static readonly EQ = 42;
	public static readonly LP = 43;
	public static readonly RP = 44;
	public static readonly LB = 45;
	public static readonly RB = 46;
	public static readonly LC = 47;
	public static readonly RC = 48;
	public static readonly LT = 49;
	public static readonly GT = 50;
	public static readonly DOT = 51;
	public static readonly COMMA = 52;
	public static readonly COLON = 53;
	public static readonly PLUS = 54;
	public static readonly MINUS = 55;
	public static readonly STR_LIT = 56;
	public static readonly BOOL_LIT = 57;
	public static readonly FLOAT_LIT = 58;
	public static readonly INT_LIT = 59;
	public static readonly IDENTIFIER = 60;
	public static readonly WS = 61;
	public static readonly LINE_COMMENT = 62;
	public static readonly COMMENT = 63;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'syntax'", 
                                                            "'import'", 
                                                            "'weak'", "'public'", 
                                                            "'package'", 
                                                            "'option'", 
                                                            "'repeated'", 
                                                            "'optional'", 
                                                            "'required'", 
                                                            "'group'", "'oneof'", 
                                                            "'map'", "'int32'", 
                                                            "'int64'", "'uint32'", 
                                                            "'uint64'", 
                                                            "'sint32'", 
                                                            "'sint64'", 
                                                            "'fixed32'", 
                                                            "'fixed64'", 
                                                            "'sfixed32'", 
                                                            "'sfixed64'", 
                                                            "'bool'", "'string'", 
                                                            "'double'", 
                                                            "'float'", "'bytes'", 
                                                            "'reserved'", 
                                                            "'extensions'", 
                                                            "'to'", "'max'", 
                                                            "'enum'", "'extend'", 
                                                            "'message'", 
                                                            "'service'", 
                                                            "'rpc'", "'stream'", 
                                                            "'returns'", 
                                                            "'\"proto2\"'", 
                                                            "''proto2''", 
                                                            "';'", "'='", 
                                                            "'('", "')'", 
                                                            "'['", "']'", 
                                                            "'{'", "'}'", 
                                                            "'<'", "'>'", 
                                                            "'.'", "','", 
                                                            "':'", "'+'", 
                                                            "'-'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "SYNTAX", 
                                                             "IMPORT", "WEAK", 
                                                             "PUBLIC", "PACKAGE", 
                                                             "OPTION", "REPEATED", 
                                                             "OPTIONAL", 
                                                             "REQUIRED", 
                                                             "GROUP", "ONEOF", 
                                                             "MAP", "INT32", 
                                                             "INT64", "UINT32", 
                                                             "UINT64", "SINT32", 
                                                             "SINT64", "FIXED32", 
                                                             "FIXED64", 
                                                             "SFIXED32", 
                                                             "SFIXED64", 
                                                             "BOOL", "STRING", 
                                                             "DOUBLE", "FLOAT", 
                                                             "BYTES", "RESERVED", 
                                                             "EXTENSIONS", 
                                                             "TO", "MAX", 
                                                             "ENUM", "EXTEND", 
                                                             "MESSAGE", 
                                                             "SERVICE", 
                                                             "RPC", "STREAM", 
                                                             "RETURNS", 
                                                             "PROTO2_LIT_SINGLE", 
                                                             "PROTO2_LIT_DOBULE", 
                                                             "SEMI", "EQ", 
                                                             "LP", "RP", 
                                                             "LB", "RB", 
                                                             "LC", "RC", 
                                                             "LT", "GT", 
                                                             "DOT", "COMMA", 
                                                             "COLON", "PLUS", 
                                                             "MINUS", "STR_LIT", 
                                                             "BOOL_LIT", 
                                                             "FLOAT_LIT", 
                                                             "INT_LIT", 
                                                             "IDENTIFIER", 
                                                             "WS", "LINE_COMMENT", 
                                                             "COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"SYNTAX", "IMPORT", "WEAK", "PUBLIC", "PACKAGE", "OPTION", "REPEATED", 
		"OPTIONAL", "REQUIRED", "GROUP", "ONEOF", "MAP", "INT32", "INT64", "UINT32", 
		"UINT64", "SINT32", "SINT64", "FIXED32", "FIXED64", "SFIXED32", "SFIXED64", 
		"BOOL", "STRING", "DOUBLE", "FLOAT", "BYTES", "RESERVED", "EXTENSIONS", 
		"TO", "MAX", "ENUM", "EXTEND", "MESSAGE", "SERVICE", "RPC", "STREAM", 
		"RETURNS", "PROTO2_LIT_SINGLE", "PROTO2_LIT_DOBULE", "SEMI", "EQ", "LP", 
		"RP", "LB", "RB", "LC", "RC", "LT", "GT", "DOT", "COMMA", "COLON", "PLUS", 
		"MINUS", "STR_LIT", "CHAR_VALUE", "HEX_ESCAPE", "OCT_ESCAPE", "CHAR_ESCAPE", 
		"BOOL_LIT", "FLOAT_LIT", "EXPONENT", "DECIMALS", "INT_LIT", "DECIMAL_LIT", 
		"OCTAL_LIT", "HEX_LIT", "IDENTIFIER", "LETTER", "DECIMAL_DIGIT", "OCTAL_DIGIT", 
		"HEX_DIGIT", "WS", "LINE_COMMENT", "COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, Protobuf2Lexer._ATN, Protobuf2Lexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Protobuf2.g4"; }

	public get literalNames(): (string | null)[] { return Protobuf2Lexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return Protobuf2Lexer.symbolicNames; }
	public get ruleNames(): string[] { return Protobuf2Lexer.ruleNames; }

	public get serializedATN(): number[] { return Protobuf2Lexer._serializedATN; }

	public get channelNames(): string[] { return Protobuf2Lexer.channelNames; }

	public get modeNames(): string[] { return Protobuf2Lexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,63,622,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
	4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
	7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
	9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
	1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
	14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
	1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
	18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
	21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
	1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
	26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
	30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
	34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
	1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
	39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
	1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,
	50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,5,55,467,8,55,
	10,55,12,55,470,9,55,1,55,1,55,1,55,5,55,475,8,55,10,55,12,55,478,9,55,
	1,55,3,55,481,8,55,1,56,1,56,1,56,1,56,3,56,487,8,56,1,57,1,57,1,57,1,57,
	1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,
	60,1,60,1,60,1,60,3,60,511,8,60,1,61,1,61,1,61,3,61,516,8,61,1,61,3,61,
	519,8,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,527,8,61,1,61,1,61,1,61,1,61,
	1,61,1,61,3,61,535,8,61,1,62,1,62,1,62,3,62,540,8,62,1,62,1,62,1,63,4,63,
	545,8,63,11,63,12,63,546,1,64,1,64,1,64,3,64,552,8,64,1,65,1,65,5,65,556,
	8,65,10,65,12,65,559,9,65,1,66,1,66,5,66,563,8,66,10,66,12,66,566,9,66,
	1,67,1,67,1,67,4,67,571,8,67,11,67,12,67,572,1,68,1,68,1,68,5,68,578,8,
	68,10,68,12,68,581,9,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,4,
	73,592,8,73,11,73,12,73,593,1,73,1,73,1,74,1,74,1,74,1,74,5,74,602,8,74,
	10,74,12,74,605,9,74,1,74,1,74,1,75,1,75,1,75,1,75,5,75,613,8,75,10,75,
	12,75,616,9,75,1,75,1,75,1,75,1,75,1,75,3,468,476,614,0,76,1,1,3,2,5,3,
	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
	29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
	41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
	105,53,107,54,109,55,111,56,113,0,115,0,117,0,119,0,121,57,123,58,125,0,
	127,0,129,59,131,0,133,0,135,0,137,60,139,0,141,0,143,0,145,0,147,61,149,
	62,151,63,1,0,11,3,0,0,0,10,10,92,92,2,0,88,88,120,120,9,0,34,34,39,39,
	92,92,97,98,102,102,110,110,114,114,116,116,118,118,2,0,69,69,101,101,1,
	0,49,57,3,0,65,90,95,95,97,122,1,0,48,57,1,0,48,55,3,0,48,57,65,70,97,102,
	3,0,9,10,12,13,32,32,2,0,10,10,13,13,635,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
	0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
	39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
	0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
	61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
	0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
	83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
	0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
	0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,121,1,0,0,0,0,
	123,1,0,0,0,0,129,1,0,0,0,0,137,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,
	1,0,0,0,1,153,1,0,0,0,3,160,1,0,0,0,5,167,1,0,0,0,7,172,1,0,0,0,9,179,1,
	0,0,0,11,187,1,0,0,0,13,194,1,0,0,0,15,203,1,0,0,0,17,212,1,0,0,0,19,221,
	1,0,0,0,21,227,1,0,0,0,23,233,1,0,0,0,25,237,1,0,0,0,27,243,1,0,0,0,29,
	249,1,0,0,0,31,256,1,0,0,0,33,263,1,0,0,0,35,270,1,0,0,0,37,277,1,0,0,0,
	39,285,1,0,0,0,41,293,1,0,0,0,43,302,1,0,0,0,45,311,1,0,0,0,47,316,1,0,
	0,0,49,323,1,0,0,0,51,330,1,0,0,0,53,336,1,0,0,0,55,342,1,0,0,0,57,351,
	1,0,0,0,59,362,1,0,0,0,61,365,1,0,0,0,63,369,1,0,0,0,65,374,1,0,0,0,67,
	381,1,0,0,0,69,389,1,0,0,0,71,397,1,0,0,0,73,401,1,0,0,0,75,408,1,0,0,0,
	77,416,1,0,0,0,79,425,1,0,0,0,81,434,1,0,0,0,83,436,1,0,0,0,85,438,1,0,
	0,0,87,440,1,0,0,0,89,442,1,0,0,0,91,444,1,0,0,0,93,446,1,0,0,0,95,448,
	1,0,0,0,97,450,1,0,0,0,99,452,1,0,0,0,101,454,1,0,0,0,103,456,1,0,0,0,105,
	458,1,0,0,0,107,460,1,0,0,0,109,462,1,0,0,0,111,480,1,0,0,0,113,486,1,0,
	0,0,115,488,1,0,0,0,117,493,1,0,0,0,119,498,1,0,0,0,121,510,1,0,0,0,123,
	534,1,0,0,0,125,536,1,0,0,0,127,544,1,0,0,0,129,551,1,0,0,0,131,553,1,0,
	0,0,133,560,1,0,0,0,135,567,1,0,0,0,137,574,1,0,0,0,139,582,1,0,0,0,141,
	584,1,0,0,0,143,586,1,0,0,0,145,588,1,0,0,0,147,591,1,0,0,0,149,597,1,0,
	0,0,151,608,1,0,0,0,153,154,5,115,0,0,154,155,5,121,0,0,155,156,5,110,0,
	0,156,157,5,116,0,0,157,158,5,97,0,0,158,159,5,120,0,0,159,2,1,0,0,0,160,
	161,5,105,0,0,161,162,5,109,0,0,162,163,5,112,0,0,163,164,5,111,0,0,164,
	165,5,114,0,0,165,166,5,116,0,0,166,4,1,0,0,0,167,168,5,119,0,0,168,169,
	5,101,0,0,169,170,5,97,0,0,170,171,5,107,0,0,171,6,1,0,0,0,172,173,5,112,
	0,0,173,174,5,117,0,0,174,175,5,98,0,0,175,176,5,108,0,0,176,177,5,105,
	0,0,177,178,5,99,0,0,178,8,1,0,0,0,179,180,5,112,0,0,180,181,5,97,0,0,181,
	182,5,99,0,0,182,183,5,107,0,0,183,184,5,97,0,0,184,185,5,103,0,0,185,186,
	5,101,0,0,186,10,1,0,0,0,187,188,5,111,0,0,188,189,5,112,0,0,189,190,5,
	116,0,0,190,191,5,105,0,0,191,192,5,111,0,0,192,193,5,110,0,0,193,12,1,
	0,0,0,194,195,5,114,0,0,195,196,5,101,0,0,196,197,5,112,0,0,197,198,5,101,
	0,0,198,199,5,97,0,0,199,200,5,116,0,0,200,201,5,101,0,0,201,202,5,100,
	0,0,202,14,1,0,0,0,203,204,5,111,0,0,204,205,5,112,0,0,205,206,5,116,0,
	0,206,207,5,105,0,0,207,208,5,111,0,0,208,209,5,110,0,0,209,210,5,97,0,
	0,210,211,5,108,0,0,211,16,1,0,0,0,212,213,5,114,0,0,213,214,5,101,0,0,
	214,215,5,113,0,0,215,216,5,117,0,0,216,217,5,105,0,0,217,218,5,114,0,0,
	218,219,5,101,0,0,219,220,5,100,0,0,220,18,1,0,0,0,221,222,5,103,0,0,222,
	223,5,114,0,0,223,224,5,111,0,0,224,225,5,117,0,0,225,226,5,112,0,0,226,
	20,1,0,0,0,227,228,5,111,0,0,228,229,5,110,0,0,229,230,5,101,0,0,230,231,
	5,111,0,0,231,232,5,102,0,0,232,22,1,0,0,0,233,234,5,109,0,0,234,235,5,
	97,0,0,235,236,5,112,0,0,236,24,1,0,0,0,237,238,5,105,0,0,238,239,5,110,
	0,0,239,240,5,116,0,0,240,241,5,51,0,0,241,242,5,50,0,0,242,26,1,0,0,0,
	243,244,5,105,0,0,244,245,5,110,0,0,245,246,5,116,0,0,246,247,5,54,0,0,
	247,248,5,52,0,0,248,28,1,0,0,0,249,250,5,117,0,0,250,251,5,105,0,0,251,
	252,5,110,0,0,252,253,5,116,0,0,253,254,5,51,0,0,254,255,5,50,0,0,255,30,
	1,0,0,0,256,257,5,117,0,0,257,258,5,105,0,0,258,259,5,110,0,0,259,260,5,
	116,0,0,260,261,5,54,0,0,261,262,5,52,0,0,262,32,1,0,0,0,263,264,5,115,
	0,0,264,265,5,105,0,0,265,266,5,110,0,0,266,267,5,116,0,0,267,268,5,51,
	0,0,268,269,5,50,0,0,269,34,1,0,0,0,270,271,5,115,0,0,271,272,5,105,0,0,
	272,273,5,110,0,0,273,274,5,116,0,0,274,275,5,54,0,0,275,276,5,52,0,0,276,
	36,1,0,0,0,277,278,5,102,0,0,278,279,5,105,0,0,279,280,5,120,0,0,280,281,
	5,101,0,0,281,282,5,100,0,0,282,283,5,51,0,0,283,284,5,50,0,0,284,38,1,
	0,0,0,285,286,5,102,0,0,286,287,5,105,0,0,287,288,5,120,0,0,288,289,5,101,
	0,0,289,290,5,100,0,0,290,291,5,54,0,0,291,292,5,52,0,0,292,40,1,0,0,0,
	293,294,5,115,0,0,294,295,5,102,0,0,295,296,5,105,0,0,296,297,5,120,0,0,
	297,298,5,101,0,0,298,299,5,100,0,0,299,300,5,51,0,0,300,301,5,50,0,0,301,
	42,1,0,0,0,302,303,5,115,0,0,303,304,5,102,0,0,304,305,5,105,0,0,305,306,
	5,120,0,0,306,307,5,101,0,0,307,308,5,100,0,0,308,309,5,54,0,0,309,310,
	5,52,0,0,310,44,1,0,0,0,311,312,5,98,0,0,312,313,5,111,0,0,313,314,5,111,
	0,0,314,315,5,108,0,0,315,46,1,0,0,0,316,317,5,115,0,0,317,318,5,116,0,
	0,318,319,5,114,0,0,319,320,5,105,0,0,320,321,5,110,0,0,321,322,5,103,0,
	0,322,48,1,0,0,0,323,324,5,100,0,0,324,325,5,111,0,0,325,326,5,117,0,0,
	326,327,5,98,0,0,327,328,5,108,0,0,328,329,5,101,0,0,329,50,1,0,0,0,330,
	331,5,102,0,0,331,332,5,108,0,0,332,333,5,111,0,0,333,334,5,97,0,0,334,
	335,5,116,0,0,335,52,1,0,0,0,336,337,5,98,0,0,337,338,5,121,0,0,338,339,
	5,116,0,0,339,340,5,101,0,0,340,341,5,115,0,0,341,54,1,0,0,0,342,343,5,
	114,0,0,343,344,5,101,0,0,344,345,5,115,0,0,345,346,5,101,0,0,346,347,5,
	114,0,0,347,348,5,118,0,0,348,349,5,101,0,0,349,350,5,100,0,0,350,56,1,
	0,0,0,351,352,5,101,0,0,352,353,5,120,0,0,353,354,5,116,0,0,354,355,5,101,
	0,0,355,356,5,110,0,0,356,357,5,115,0,0,357,358,5,105,0,0,358,359,5,111,
	0,0,359,360,5,110,0,0,360,361,5,115,0,0,361,58,1,0,0,0,362,363,5,116,0,
	0,363,364,5,111,0,0,364,60,1,0,0,0,365,366,5,109,0,0,366,367,5,97,0,0,367,
	368,5,120,0,0,368,62,1,0,0,0,369,370,5,101,0,0,370,371,5,110,0,0,371,372,
	5,117,0,0,372,373,5,109,0,0,373,64,1,0,0,0,374,375,5,101,0,0,375,376,5,
	120,0,0,376,377,5,116,0,0,377,378,5,101,0,0,378,379,5,110,0,0,379,380,5,
	100,0,0,380,66,1,0,0,0,381,382,5,109,0,0,382,383,5,101,0,0,383,384,5,115,
	0,0,384,385,5,115,0,0,385,386,5,97,0,0,386,387,5,103,0,0,387,388,5,101,
	0,0,388,68,1,0,0,0,389,390,5,115,0,0,390,391,5,101,0,0,391,392,5,114,0,
	0,392,393,5,118,0,0,393,394,5,105,0,0,394,395,5,99,0,0,395,396,5,101,0,
	0,396,70,1,0,0,0,397,398,5,114,0,0,398,399,5,112,0,0,399,400,5,99,0,0,400,
	72,1,0,0,0,401,402,5,115,0,0,402,403,5,116,0,0,403,404,5,114,0,0,404,405,
	5,101,0,0,405,406,5,97,0,0,406,407,5,109,0,0,407,74,1,0,0,0,408,409,5,114,
	0,0,409,410,5,101,0,0,410,411,5,116,0,0,411,412,5,117,0,0,412,413,5,114,
	0,0,413,414,5,110,0,0,414,415,5,115,0,0,415,76,1,0,0,0,416,417,5,34,0,0,
	417,418,5,112,0,0,418,419,5,114,0,0,419,420,5,111,0,0,420,421,5,116,0,0,
	421,422,5,111,0,0,422,423,5,50,0,0,423,424,5,34,0,0,424,78,1,0,0,0,425,
	426,5,39,0,0,426,427,5,112,0,0,427,428,5,114,0,0,428,429,5,111,0,0,429,
	430,5,116,0,0,430,431,5,111,0,0,431,432,5,50,0,0,432,433,5,39,0,0,433,80,
	1,0,0,0,434,435,5,59,0,0,435,82,1,0,0,0,436,437,5,61,0,0,437,84,1,0,0,0,
	438,439,5,40,0,0,439,86,1,0,0,0,440,441,5,41,0,0,441,88,1,0,0,0,442,443,
	5,91,0,0,443,90,1,0,0,0,444,445,5,93,0,0,445,92,1,0,0,0,446,447,5,123,0,
	0,447,94,1,0,0,0,448,449,5,125,0,0,449,96,1,0,0,0,450,451,5,60,0,0,451,
	98,1,0,0,0,452,453,5,62,0,0,453,100,1,0,0,0,454,455,5,46,0,0,455,102,1,
	0,0,0,456,457,5,44,0,0,457,104,1,0,0,0,458,459,5,58,0,0,459,106,1,0,0,0,
	460,461,5,43,0,0,461,108,1,0,0,0,462,463,5,45,0,0,463,110,1,0,0,0,464,468,
	5,39,0,0,465,467,3,113,56,0,466,465,1,0,0,0,467,470,1,0,0,0,468,469,1,0,
	0,0,468,466,1,0,0,0,469,471,1,0,0,0,470,468,1,0,0,0,471,481,5,39,0,0,472,
	476,5,34,0,0,473,475,3,113,56,0,474,473,1,0,0,0,475,478,1,0,0,0,476,477,
	1,0,0,0,476,474,1,0,0,0,477,479,1,0,0,0,478,476,1,0,0,0,479,481,5,34,0,
	0,480,464,1,0,0,0,480,472,1,0,0,0,481,112,1,0,0,0,482,487,3,115,57,0,483,
	487,3,117,58,0,484,487,3,119,59,0,485,487,8,0,0,0,486,482,1,0,0,0,486,483,
	1,0,0,0,486,484,1,0,0,0,486,485,1,0,0,0,487,114,1,0,0,0,488,489,5,92,0,
	0,489,490,7,1,0,0,490,491,3,145,72,0,491,492,3,145,72,0,492,116,1,0,0,0,
	493,494,5,92,0,0,494,495,3,143,71,0,495,496,3,143,71,0,496,497,3,143,71,
	0,497,118,1,0,0,0,498,499,5,92,0,0,499,500,7,2,0,0,500,120,1,0,0,0,501,
	502,5,116,0,0,502,503,5,114,0,0,503,504,5,117,0,0,504,511,5,101,0,0,505,
	506,5,102,0,0,506,507,5,97,0,0,507,508,5,108,0,0,508,509,5,115,0,0,509,
	511,5,101,0,0,510,501,1,0,0,0,510,505,1,0,0,0,511,122,1,0,0,0,512,513,3,
	127,63,0,513,515,3,101,50,0,514,516,3,127,63,0,515,514,1,0,0,0,515,516,
	1,0,0,0,516,518,1,0,0,0,517,519,3,125,62,0,518,517,1,0,0,0,518,519,1,0,
	0,0,519,535,1,0,0,0,520,521,3,127,63,0,521,522,3,125,62,0,522,535,1,0,0,
	0,523,524,3,101,50,0,524,526,3,127,63,0,525,527,3,125,62,0,526,525,1,0,
	0,0,526,527,1,0,0,0,527,535,1,0,0,0,528,529,5,105,0,0,529,530,5,110,0,0,
	530,535,5,102,0,0,531,532,5,110,0,0,532,533,5,97,0,0,533,535,5,110,0,0,
	534,512,1,0,0,0,534,520,1,0,0,0,534,523,1,0,0,0,534,528,1,0,0,0,534,531,
	1,0,0,0,535,124,1,0,0,0,536,539,7,3,0,0,537,540,3,107,53,0,538,540,3,109,
	54,0,539,537,1,0,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,
	542,3,127,63,0,542,126,1,0,0,0,543,545,3,141,70,0,544,543,1,0,0,0,545,546,
	1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,128,1,0,0,0,548,552,3,131,65,
	0,549,552,3,133,66,0,550,552,3,135,67,0,551,548,1,0,0,0,551,549,1,0,0,0,
	551,550,1,0,0,0,552,130,1,0,0,0,553,557,7,4,0,0,554,556,3,141,70,0,555,
	554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,132,1,0,
	0,0,559,557,1,0,0,0,560,564,5,48,0,0,561,563,3,143,71,0,562,561,1,0,0,0,
	563,566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,134,1,0,0,0,566,564,
	1,0,0,0,567,568,5,48,0,0,568,570,7,1,0,0,569,571,3,145,72,0,570,569,1,0,
	0,0,571,572,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,136,1,0,0,0,574,
	579,3,139,69,0,575,578,3,139,69,0,576,578,3,141,70,0,577,575,1,0,0,0,577,
	576,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,138,1,0,
	0,0,581,579,1,0,0,0,582,583,7,5,0,0,583,140,1,0,0,0,584,585,7,6,0,0,585,
	142,1,0,0,0,586,587,7,7,0,0,587,144,1,0,0,0,588,589,7,8,0,0,589,146,1,0,
	0,0,590,592,7,9,0,0,591,590,1,0,0,0,592,593,1,0,0,0,593,591,1,0,0,0,593,
	594,1,0,0,0,594,595,1,0,0,0,595,596,6,73,0,0,596,148,1,0,0,0,597,598,5,
	47,0,0,598,599,5,47,0,0,599,603,1,0,0,0,600,602,8,10,0,0,601,600,1,0,0,
	0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,603,
	1,0,0,0,606,607,6,74,0,0,607,150,1,0,0,0,608,609,5,47,0,0,609,610,5,42,
	0,0,610,614,1,0,0,0,611,613,9,0,0,0,612,611,1,0,0,0,613,616,1,0,0,0,614,
	615,1,0,0,0,614,612,1,0,0,0,615,617,1,0,0,0,616,614,1,0,0,0,617,618,5,42,
	0,0,618,619,5,47,0,0,619,620,1,0,0,0,620,621,6,75,0,0,621,152,1,0,0,0,21,
	0,468,476,480,486,510,515,518,526,534,539,546,551,557,564,572,577,579,593,
	603,614,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!Protobuf2Lexer.__ATN) {
			Protobuf2Lexer.__ATN = new ATNDeserializer().deserialize(Protobuf2Lexer._serializedATN);
		}

		return Protobuf2Lexer.__ATN;
	}


	static DecisionsToDFA = Protobuf2Lexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}